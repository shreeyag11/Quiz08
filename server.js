const express = require('express');
const app = express();
const port = 3000;
const mcache = require('memory-cache');
const bodyParser = require('body-parser');
const { check, validationResult } = require('express-validator');
const cors= require('cors');

const swaggerJsdoc= require('swagger-jsdoc'); 
const swaggerUi= require('swagger-ui-express');

app.use(cors());

const options = {
     swaggerDefinition: {
       info: {
         title: "Personal Budget API",
         version: "1.0.0",
         description: "Personal Budget API autogenerated by Swagger",
       },
       host: "localhost:3000",
       basePath: "/",
     },
     apis: ["./server.js"],   
};

const specs = swaggerJsdoc(options); 
app.use("/docs", swaggerUi.serve, swaggerUi.setup(specs));

const mariadb = require('mariadb');
const pool = mariadb.createPool({
	host: 'localhost',
	user: 'root',
	password: 'root',
	database: 'sample',
	port: 3306,
	connectionLimit:5
});

var cache = (duration) => {
	return (req, res, next) => {
		let key = '__express__' + req.originalUrl || req.url;
		let cachedBody = mcache.get(key);
		if(cachedBody) {
			res.send(cachedBody);
			return;
		}
		else {
			res.sendResponse = res.send;
			res.send = (body) => {
				mcache.put(key, body, duration*1000);
				res.sendResponse(body);
			}	
		next();
		}
	}
}


/**
* @swagger
* /company:
*    get:
*	description: Return all company where Company ID is 16
*	produces: 
*	    - application/json
*	resources:
*	    200:
*	       description: bla bla
*/
app.get('/company', cache(10), async (req, res) => {
	var connection;
	try {
		connection = await pool.getConnection();
		console.log("Connected...");
		var query = "SELECT * FROM company";
		var rows = await connection.query(query);
		res.setHeader('Content-Type','application/json');
		res.status(200).send(rows);
		return connection.end();	
	} catch(err) {
		console.log(err);
		res.status(500).send(res);
	}
});

app.get('/customer', cache(10), async (req, res) => {
	var connection;
	try {
		connection = await pool.getConnection();
		var query = "SELECT * FROM customer" 
		var rows = await connection.query(query); 
		res.setHeader('Content-Type', 'application/json'); 
		res.status(200).send(rows); 
		return connection.end(); 
	} catch(err) {     
		console.log(err);     
		res.status(500).send(res); 
	} 
});


app.get('/foods', cache(10), async (req, res) => {
	var connection;
	try {
		connection = await pool.getConnection();
		var query = "SELECT * FROM foods" 
		var rows = await connection.query(query); 
		res.setHeader('Content-Type', 'application/json'); 
		res.status(200).send(rows); 
		return connection.end(); 
	} catch(err) {     
		console.log(err);     
		res.status(500).send(res); 
	} 
});

app.use(bodyParser.json());
app.put('/updateCompany/:id', [
	check('COMPANY_NAME').trim().not().isEmpty().withMessage('Company name cannot be empty'),
	check('COMPANY_CITY').trim().not().isEmpty().withMessage('Company city cannot be empty')
	], async (req, res) => {
	const errors = validationResult(req);
	if(!errors.isEmpty()) {
		return res.status(400).json({errors: errors.array()});
	}
	var connection;
	try {
		const ID = req.params.id.trim();
		if(ID == "") {
			res.status(400).json({errors: "Company Id cannot be empty"});
		} else {
			const {COMPANY_NAME, COMPANY_CITY} = req.body;
			connection = await pool.getConnection(); 
			var query = (`UPDATE company SET COMPANY_NAME = '${COMPANY_NAME}', COMPANY_CITY= '${COMPANY_CITY}' WHERE COMPANY_ID = '${ID}'`);
			var rows = await connection.query(query);
			if(rows.affectedRows == 0) {
				query = (`INSERT INTO company VALUES ('${ID}', '${COMPANY_NAME}', '${COMPANY_CITY}')`);
				rows = await connection.query(query);
			}
			res.setHeader('Content-Type','application/json');
			res.status(200).send(rows);
			return connection.end();
		}
	} catch(err) {
		console.log(err);
		res.status(500).send(res);
	}
});

app.post('/addFood', [
	check('ITEM_NAME').trim().not().isEmpty().withMessage('Item name must not be empty'),
	check('ITEM_UNIT').trim(),
	check('COMPANY_ID').trim(),
	check('ITEM_ID').trim()	
	], async (req, res) => {

	const errors = validationResult(req);
        if (!errors.isEmpty()) {
	       return res.status(400).json({errors: errors.array()});  
	}
	var connection;
	try {
		const {ITEM_ID, ITEM_NAME, ITEM_UNIT, COMPANY_ID} = req.body;
		connection = await pool.getConnection();
		var query = (`INSERT INTO foods VALUES ('${ITEM_ID}','${ITEM_NAME}','${ITEM_UNIT}','${COMPANY_ID}')`);
		var rows = await connection.query(query);
		res.setHeader('Content-Type', 'application/json');
		res.status(200).send(rows);
		return connection.end();
	} catch(err) {
		res.status(500).send(err);
	}
});


app.patch('/patchCompany/:id', async (req,res) => {
     	const errors = validationResult(req);     
    	if(!errors.isEmpty()) {       
		return res.status(400).send(errors);     
	}     
	var connection;     
	const ID = req.params.id;     
	const {COMPANY_NAME,COMPANY_CITY} = req.body;     
	var rows = 0;     
	try{         
		connection = await pool.getConnection();         
		if (COMPANY_NAME && COMPANY_CITY){                         
			const query = await pool.query(`UPDATE company SET COMPANY_NAME='${COMPANY_NAME}', COMPANY_CITY='${COMPANY_CITY}' WHERE COMPANY_ID = '${ID}'`);                				rows = query.affectedRows;         
		} else if (COMPANY_NAME) {
                 	const query = await pool.query(`UPDATE company SET COMPANY_NAME='${COMPANY_NAME}' WHERE COMPANY_ID = '${ID}'`)
	                rows = query.affectedRows
         	} else if (COMPANY_CITY) {
	                const query = await pool.query(`UPDATE company SET COMPANY_CITY='${COMPANY_CITY}' WHERE COMPANY_ID = '${ID}'`);
	                rows = query.affectedRows
	        }         
		if(rows == 0) {    
	             	return res.status(404).send("No rows updated, record not Found");
	        }
	         return res.status(200).send("Updated Successfully");         
	} catch(error) {
                res.status(500).send('Server Error');
	} finally{
	 	if (connection) return connection.end(); 
	}
});

app.delete('/deleteFood/:id', async (req, res) => {
	var connection;
	try {
		const ID = req.params.id;
		connection = await pool.getConnection();
		var query = (`DELETE FROM foods WHERE ITEM_ID = '${ID}'`);
		var rows = await connection.query(query);
		if(rows.affectedRows == 0) {
			return res.status(404).send("No such Id exists");
		}
		res.setHeader('Content-Type', 'application/json');
		res.status(200).send(rows);
		return connection.end();
	} catch(err) {
		res.status(500).send(res);
	}
});

app.listen(port, () => {
	console.log(`Listening at http://localhost:${port}`);
});

