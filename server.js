const express = require('express');
const app = express();
const port = 3000;
const mcache = require('memory-cache');
const bodyParser = require('body-parser');
const { check, validationResult } = require('express-validator');
const cors = require('cors');

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

app.use(cors());

const options = {
	swaggerDefinition: {
		info: {
			title: "Personal Budget API",
			version: "1.0.0",
			description: "Personal Budget API autogenerated by Swagger",
		},
		host: "167.172.152.68:3000",
		basePath: "/",
	},
	apis: ["./server.js"],
};

const specs = swaggerJsdoc(options);
app.use("/docs", swaggerUi.serve, swaggerUi.setup(specs));

const mariadb = require('mariadb');
const pool = mariadb.createPool({
	host: 'localhost',
	user: 'root',
	password: 'root',
	database: 'sample',
	port: 3306,
	connectionLimit: 5
});

var cache = (duration) => {
	return (req, res, next) => {
		let key = '__express__' + req.originalUrl || req.url;
		let cachedBody = mcache.get(key);
		if (cachedBody) {
			res.send(cachedBody);
			return;
		}
		else {
			res.sendResponse = res.send;
			res.send = (body) => {
				mcache.put(key, body, duration * 1000);
				res.sendResponse(body);
			}
			next();
		}
	}
}

/**  
* @swagger  
* /company:  
*    get:  
*      description: Return all records from company table  
*      produces:  
*          - application/json  
*      responses:  
*          200:  
*              description: Fetch object containing array of company objects
*	   500:
*	       description: Server error  
*/
app.get('/company', cache(10), async (req, res) => {
	var connection;
	try {
		connection = await pool.getConnection();
		var query = "SELECT * FROM company";
		var rows = await connection.query(query);
		res.setHeader('Content-Type', 'application/json');
		res.status(200).send(rows);
		return connection.end();
	} catch (err) {
		console.log(err);
		res.status(500).send(res);
	}
});

/**  
* @swagger  
* /customer:  
*    get:  
*      description: Return all records from customer table  
*      produces:  
*          - application/json  
*      responses:  
*          200:  
*              description: Fetch object containing array of customer objects
*	   500:
*	       description: Server error   
*/
app.get('/customer', cache(10), async (req, res) => {
	var connection;
	try {
		connection = await pool.getConnection();
		var query = "SELECT * FROM customer"
		var rows = await connection.query(query);
		res.setHeader('Content-Type', 'application/json');
		res.status(200).send(rows);
		return connection.end();
	} catch (err) {
		console.log(err);
		res.status(500).send(res);
	}
});

/**  
* @swagger  
* /foods:  
*    get:  
*      description: Return all records from foods table  
*      produces:  
*          - application/json  
*      responses:  
*          200:  
*              description: Fetch object containing array of foods objects
*	   500:
*	       description: Server error 
*/
app.get('/foods', cache(10), async (req, res) => {
	var connection;
	try {
		connection = await pool.getConnection();
		var query = "SELECT * FROM foods"
		var rows = await connection.query(query);
		res.setHeader('Content-Type', 'application/json');
		res.status(200).send(rows);
		return connection.end();
	} catch (err) {
		console.log(err);
		res.status(500).send(res);
	}
});

app.use(bodyParser.json());

/**
 * @swagger
 * definitions:
 *   Company:
 *     properties:
 *       COMPANY_ID:
 *         type: string
 *       COMPANY_NAME:
 *         type: string
 *       COMPANY_CITY:
 *         type: string
 * 
 */

/**  
* 
* @swagger  
* /updateCompany:  
*    put:  
*      description: add or update a record to Company table  
*      produces:  
*          - application/json  
*      responses:  
*          200:  
*              description: Added or Updated data to Company table  
*          500:  
*              description: Server Error  
*      parameters:  
*          - name: Company
*            description: Company object  
*            in: body  
*            required: true  
*            schema:  
*              $ref: '#/definitions/Company'
*/
app.put('/updateCompany', [
	check('COMPANY_NAME').trim().not().isEmpty().withMessage('Company name cannot be empty'),
	check('COMPANY_CITY').trim().not().isEmpty().withMessage('Company city cannot be empty')
], async (req, res) => {
	const errors = validationResult(req);
	if (!errors.isEmpty()) {
		return res.status(400).json({ errors: errors.array() });
	}
	var connection;
	try {
		const { COMPANY_ID, COMPANY_NAME, COMPANY_CITY } = req.body;
		if (COMPANY_ID == "") {
			res.status(400).json({ errors: "Company Id cannot be empty" });
		} else {
			connection = await pool.getConnection();
			var query = (`UPDATE company SET COMPANY_NAME = '${COMPANY_NAME}', COMPANY_CITY= '${COMPANY_CITY}' WHERE COMPANY_ID = '${COMPANY_ID}'`);
			var rows = await connection.query(query);
			if (rows.affectedRows == 0) {
				query = (`INSERT INTO company VALUES ('${COMPANY_ID}', '${COMPANY_NAME}', '${COMPANY_CITY}')`);
				rows = await connection.query(query);
			}
			res.setHeader('Content-Type', 'application/json');
			res.status(200).send(rows);
			return connection.end();
		}
	} catch (err) {
		console.log(err);
		res.status(500).send(res);
	}
});

/**
 * @swagger
 * definitions:
 *   Food:
 *     properties:
 *       ITEM_ID:
 *         type: string
 *       ITEM_NAME:
 *         type: string
 *       ITEM_UNIT:
 *         type: string
 *       COMPANY_ID:
 *         type: string
 */
/**
 * @swagger
 * /addFood:
 *    post:
 *      description: add record to food table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Added data to food table
 *          500:
 *              description: Server error
 *          400:
 *              description: Errors in input object
 *      parameters:
 *          - name: Food
 *            description: food object
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Food'
 *
 */
app.post('/addFood', [
	check('ITEM_NAME').trim().not().isEmpty().withMessage('Item name must not be empty'),
	check('ITEM_UNIT').trim(),
	check('COMPANY_ID').trim(),
	check('ITEM_ID').trim()
], async (req, res) => {

	const errors = validationResult(req);
	if (!errors.isEmpty()) {
		return res.status(400).json({ errors: errors.array() });
	}
	var connection;
	try {
		const { ITEM_ID, ITEM_NAME, ITEM_UNIT, COMPANY_ID } = req.body;
		connection = await pool.getConnection();
		var query = (`INSERT INTO foods VALUES ('${ITEM_ID}','${ITEM_NAME}','${ITEM_UNIT}','${COMPANY_ID}')`);
		var rows = await connection.query(query);
		res.setHeader('Content-Type', 'application/json');
		res.status(200).send(rows);
		return connection.end();
	} catch (err) {
		res.status(500).send(err);
	}
});


/**  
* @swagger  
* /patchCompany:  
*    patch:  
*      description: Update record in the company table  
*      produces:  
*          - application/json  
*      responses:  
*          200:  
*              description: Updated data in the company table  
*          400:  
*              description: Record not found  		
*          500:  
*              description: Server error  
*      parameters:  
*          - name: Company  
*            description: company object  
*            in: body  
*            required: true  
*            schema:  
*              $ref: '#/definitions/Company'  
*  
*/
app.patch('/patchCompany', async (req, res) => {
	const errors = validationResult(req);
	if (!errors.isEmpty()) {
		return res.status(400).send(errors);
	}
	var connection;
	const { COMPANY_ID, COMPANY_NAME, COMPANY_CITY } = req.body;
	var rows = 0;
	try {
		connection = await pool.getConnection();
		if (COMPANY_NAME && COMPANY_CITY) {
			const query = await pool.query(`UPDATE company SET COMPANY_NAME='${COMPANY_NAME}', COMPANY_CITY='${COMPANY_CITY}' WHERE COMPANY_ID = '${COMPANY_ID}'`); rows = query.affectedRows;
		} else if (COMPANY_NAME) {
			const query = await pool.query(`UPDATE company SET COMPANY_NAME='${COMPANY_NAME}' WHERE COMPANY_ID = '${COMPANY_ID}'`)
			rows = query.affectedRows
		} else if (COMPANY_CITY) {
			const query = await pool.query(`UPDATE company SET COMPANY_CITY='${COMPANY_CITY}' WHERE COMPANY_ID = '${COMPANY_ID}'`);
			rows = query.affectedRows
		}
		if (rows == 0) {
			return res.status(400).send("No rows updated, record not Found");
		}
		return res.status(200).send("Updated Successfully");
	} catch (error) {
		res.status(500).send('Server Error');
	} finally {
		if (connection) return connection.end();
	}
});

/**  
* @swagger  
* /deleteFood/{id}:  
*    delete:  
*      description: Delete record in Foods table  
*      produces:  
*          - application/json  
*      responses:  
*          200:  
*              description: Successfully deleted record from table  
*          500:  
*              description: Server Error  
*      parameters:  
*          - name: id  
*            in: path  
*            required: true  
*            type: string  
*  
*/
app.delete('/deleteFood/:id', async (req, res) => {
	var connection;
	try {
		const ID = req.params.id;
		connection = await pool.getConnection();
		var query = (`DELETE FROM foods WHERE ITEM_ID = '${ID}'`);
		var rows = await connection.query(query);
		if (rows.affectedRows == 0) {
			return res.status(404).send("No such Id exists");
		}
		res.setHeader('Content-Type', 'application/json');
		res.status(200).send(rows);
		return connection.end();
	} catch (err) {
		res.status(500).send(res);
	}
});

app.listen(port, () => {
	console.log(`Listening at http://localhost:${port}`);
});

